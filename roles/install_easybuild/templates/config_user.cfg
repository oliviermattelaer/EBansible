[MAIN]
# Enable debug log mode (def False)
#debug=
# Enable info log mode (def False)
#info=
# Enable quiet/warning log mode (def False)
#quiet=

[basic]
# Print build overview incl. dependencies (full paths) (def False)
#dry-run=
# Print build overview incl. dependencies (short paths) (def False)
#dry-run-short=
# Print build environment and (expected) build procedure that will be performed (def False)
#extended-dry-run=
# Ignore errors that occur during dry run (def True)
#extended-dry-run-ignore-errors=
# Force to rebuild software even if it's already installed (i.e. if it can be found as module), and skipping check for OS dependencies (def False)
#force=
# Submit the build as a job (def False)
#job=
# Redirect main log to stdout (def False)
#logtostdout=
# Only build listed blocks (type comma-separated list)
#only-blocks=
# Rebuild software, even if module already exists (don't skip OS dependencies checks) (def False)
#rebuild=
# Enable dependency resolution, using easyconfigs in specified paths (type pathsep-separated list; def )
robot=/usr/easybuild/easyconfigs/
# Additional paths to consider by robot for easyconfigs (--robot paths get priority) (type pathsep-separated list; def )
#robot-paths=
# Skip existing software (useful for installing additional packages) (def False)
#skip=
# Stop the installation after certain step (type choice; def source) (choices: fetch, ready, source, patch, prepare, configure, build, test, install, extensions, postproc, sanitycheck, cleanup, module, permissions, package, testcases)
#stop=
# Set strictness level (type choice; def warn) (choices: ignore, warn, error)
#strict=

[config]
# Show all supported module naming schemes (def False)
#avail-module-naming-schemes=
# Show all supported module tools (def False)
#avail-modules-tools=
# Show all repository types (incl. non-usable) (def False)
#avail-repositories=
# Temporary build path (def /opt/easybuild/.local/easybuild/build)
# List of files specifying metadata for external modules (INI format) (type comma-separated list)
#external-modules-metadata=
# Directory names to ignore when searching for files/dirs (type comma-separated list; def .git,.svn)
#ignore-dirs=
# Location(s) of extra or customized easyblocks (type comma-separated list; def )
#include-easyblocks=
# Location(s) of extra or customized module naming schemes (type comma-separated list; def )
#include-module-naming-schemes=
# Location(s) of extra or customized toolchains or toolchain components (type comma-separated list; def )
#include-toolchains=
# Install path for software and modules (def /opt/easybuild/.local/easybuild)
#installpath=
# Install path for modules (if None, combine --installpath and --subdir-modules)
#installpath-modules=
# Install path for software (if None, combine --installpath and --subdir-software)
#installpath-software=
# Backend to use for submitting jobs (type choice; def GC3Pie) (choices: GC3Pie, PbsPython)
#job-backend=
# Directory name and format of the log file (type comma-separated tuple; def easybuild,easybuild-%(name)s-%(version)s-%(date)s.%(time)s.log)
#logfile-format=
# Module naming scheme to use (def EasyBuildMNS)
#module-naming-scheme=
# Syntax to be used for module files (type choice; def Lua) (choices: Lua, Tcl)
#module-syntax=
#module-syntax=Tcl
# Extend supported module classes (For more info on the default classes, use --show-default-moduleclasses) (type comma-separated list; def base,bio,cae,chem,compiler,data,debugger,devel,geo,ide,lang,lib,math,mpi,numlib,perf,phys,system,toolchain,tools,vis)
#moduleclasses=
# Path to file containing footer to be added to all generated module files
#modules-footer=
# Path to file containing header to be added to all generated module files
#modules-header=
# Modules tool to use (type choice; def Lmod) (choices: EnvironmentModulesC, EnvironmentModulesTcl, Lmod)
#modules-tool=
#modules-tool=EnvironmentModulesC
# Packaging naming scheme choice (type choice; def EasyBuildPNS) (choices: EasyBuildPNS)
#package-naming-scheme=
# The destination path for the packages built by package-tool (def /opt/easybuild/.local/easybuild/packages)
#packagepath=
# Change prefix for buildpath, installpath, sourcepath and repositorypath (used prefix for defaults /opt/easybuild/.local/easybuild)
#prefix=
# Enable generating of modules that unload recursively. (def False)
#recursive-module-unload=
# Repository type, using repositorypath (type choice; def FileRepository) (choices: FileRepository)
#repository=
# Repository path, used by repository (is passed as list of arguments to create the repository instance). For more info, use --avail-repositories. (type comma-separated list; def /opt/easybuild/.local/easybuild/ebfiles_repo)
#repositorypath=
# Path(s) to where sources should be downloaded (string, colon-separated) (def /opt/easybuild/.local/easybuild/sources)
#sourcepath=
# Installpath subdir for modules (def modules)
#subdir-modules=
# Installpath subdir for software (def software)
#subdir-software=
# Base path of user-specific modules relative to their $HOME
#subdir-user-modules=
# Suffix for module files install path (def all)
#suffix-modules-path=
# Path to where a job should place the output (to be set within jobscript)
#testoutput=
# Log directory where temporary log files are stored
#tmp-logdir=
# Directory to use for temporary storage
#tmpdir=

[github]
# Check status of GitHub integration, and report back (def False)
#check-github=
# Run a style check on the given easyconfigs (def False)
#check-style=
# Dump test report to specified path (def test_report.md)
#dump-test-report=
# Obtain easyconfigs from specified PR (type <type 'int'>)
#from-pr=
# Path to Git working directories for EasyBuild repositories (type <type 'str'>)
#git-working-dirs-path=
# GitHub organization (type <type 'str'>)
#github-org=
# GitHub username (type <type 'str'>)
#github-user=
# Install GitHub token (requires --github-user) (def False)
#install-github-token=
# Open a new pull request (def False)
#new-pr=
# Branch name to use for new PRs; '<timestamp>_new_pr_<name><version>' if unspecified (type <type 'str'>)
#pr-branch-name=
# Commit message for new/updated pull request created with --new-pr (type <type 'str'>)
#pr-commit-msg=
# Description for new pull request created with --new-pr (type <type 'str'>)
#pr-descr=
# Target account for new PRs (type <type 'str'>; def hpcugent)
#pr-target-account=
# Target branch for new PRs (type <type 'str'>; def develop)
#pr-target-branch=
# Target repository for new/updating PRs (type <type 'str'>; def easybuild-easyconfigs)
#pr-target-repo=
# Title for new pull request created with --new-pr (type <type 'str'>)
#pr-title=
# Review specified pull request (type <type 'int'>)
#review-pr=
# Regex used to filter out variables in environment dump of test report
#test-report-env-filter=
# Update an existing pull request (type <type 'int'>)
#update-pr=
# Upload full test report as a gist on GitHub (def False)
#upload-test-report=

[informative]
# Show all constants that can be used in configuration files (def False)
#avail-cfgfile-constants=
# Show all constants that can be used in easyconfigs (def False)
#avail-easyconfig-constants=
# Show all license constants that can be used in easyconfigs (def False)
#avail-easyconfig-licenses=
# Show all easyconfig parameters (include easyblock-specific ones by using -e) (def False)
#avail-easyconfig-params=
# Show all template names and template constants that can be used in easyconfigs. (def False)
#avail-easyconfig-templates=
# Show options for toolchain (type str)
#avail-toolchain-opts=
# Check for version conflicts in dependency graphs (def False)
#check-conflicts=
# Create dependency graph
#dep-graph=
# Dump source script to set up build environment based on toolchain/dependencies (def False)
#dump-env-script=
# Print location to EasyBuild log file of last (failed) session (def False)
#last-log=
# Show list of available easyblocks (type choice; def simple) (choices: simple, detailed)
#list-easyblocks=
# Show list of installed software (type choice; def simple) (choices: simple, detailed)
#list-installed-software=
# Show list of supported software (type choice; def simple) (choices: simple, detailed)
#list-software=
# Show list of known toolchains (def False)
#list-toolchains=
# Search for easyconfig files in the robot search path, print full paths
#search=
# Search for easyconfig files in the robot search path, print only filenames
#search-filename=
# Search for easyconfig files in the robot search path, print short paths
#search-short=
# Show current EasyBuild configuration (only non-default + selected settings) (def False)
#show-config=
# Show list of default config files (def False)
#show-default-configfiles=
# Show default module classes with description (def False)
#show-default-moduleclasses=
# Show current EasyBuild configuration (all settings) (def False)
#show-full-config=
# Terse output (machine-readable) (def False)
#terse=

[job]
# Configuration file for job backend
#job-backend-config=
# Number of cores to request per job (type int)
#job-cores=
# Maximum walltime for jobs (in hours) (type int; def 24)
#job-max-walltime=
# Output directory for jobs (default: current directory) (def /opt/easybuild)
#job-output-dir=
# Interval between polls for status of jobs (in seconds) (type <type 'float'>; def 30.0)
#job-polling-interval=
# Target resource for jobs
#job-target-resource=

[override]
# Include dummy in minimal toolchain searches (def False)
#add-dummy-to-minimal-toolchains=
# Allow mismatch of modules tool and definition of 'module' function (def False)
#allow-modules-tool-mismatch=
# Allow using of EasyBuild as root (NOT RECOMMENDED!) (def False)
#allow-use-as-root-and-accept-consequences=
# Cleanup build dir after successful installation. (def True)
#cleanup-builddir=
# Cleanup tmp dir after successful run. (def True)
#cleanup-tmpdir=
# Colorize output (type choice; def auto) (choices: auto, always, never)
#color=
# Also consider archived easyconfigs (def False)
#consider-archived-easyconfigs=
# Run Lmod modules tool commands in debug module (def False)
#debug-lmod=
# Specify default optimisation level (type choice; def defaultopt) (choices: noopt, lowopt, defaultopt, opt)
#default-opt-level=
# Run pretending to be (future) version, to test removal of deprecated code.
#deprecated=
# Enable including of development log messages (def False)
#devel=
# Timeout for initiating downloads (in seconds) (type <type 'float'>)
#download-timeout=
# Reformat easyconfigs using autopep8 when dumping them (def False)
#dump-autopep8=
# easyblock to use for processing the spec file or dumping the options
#easyblock=
# Allow experimental code (with behaviour that can be changed/removed at any given time). (def False)
#experimental=
# List of extra modules to load after setting up the build environment (type comma-separated list)
#extra-modules=
# List of dependencies that you do *not* want to install with EasyBuild, because equivalent OS packages are installed. (e.g. --filter-deps=zlib,ncurses) (type comma-separated list)
#filter-deps=
# List of names of environment variables that should *not* be defined/updated by module files generated by EasyBuild (type comma-separated list)
#filter-env-vars=
# Use fixed naming scheme for installation directories (def False)
#fixed-installdir-naming-scheme=
# Group to be used for software installations (only verified, not set)
#group=
# Enable group write permissions on installation directory after installation (def False)
#group-writable-installdir=
# Install 'hidden' module file(s) by prefixing their version with '.' (def False)
#hidden=
# Comma separated list of dependencies that you want automatically hidden, (e.g. --hide-deps=zlib,ncurses) (type comma-separated list)
#hide-deps=
# Comma separated list of toolchains that you want automatically hidden, (e.g. --hide-toolchains=GCCcore) (type comma-separated list)
#hide-toolchains=
# Ignore any listed OS dependencies (def False)
#ignore-osdeps=
# Install latest known version of easybuild (def False)
#install-latest-eb-release=
# Maximum ratio for failures to allow when adjusting permissions (type float; def 0.5)
#max-fail-ratio-adjust-permissions=
# Use minimal toolchain when resolving dependencies (def False)
#minimal-toolchains=
# Only generate module file(s); skip all steps except for module, prepare, ready, sanitycheck (def False)
#module-only=
# Template for MPI commands (template keys: %(nr_ranks)s, %(cmd)s)
#mpi-cmd-template=
# Run MPI tests (when relevant) (def True)
#mpi-tests=
# Set architecture optimization, overriding native architecture optimizations
#optarch=
# Set output format (type choice; def txt) (choices: txt, rst)
#output-format=
# Specify (maximum) level of parallellism used during build procedure (type int)
#parallel=
# Does the build/installation in a test directory located in $HOME/easybuildinstall (def False)
#pretend=
# Set read-only permissions on installation directory after installation (def False)
#read-only-installdir=
# Enable use of RPATH for linking with libraries (def False)
#rpath=
# List of regex patterns to use for filtering out RPATH paths (type comma-separated list)
#rpath-filter=
# Set the generated module as default (def False)
#set-default-module=
# Set group ID bit on newly created directories (def False)
#set-gid-bit=
# Skip running test cases (def False)
#skip-test-cases=
# Set sticky bit on newly created directories (def False)
#sticky-bit=
# umask to use (e.g. '022'); non-user write permissions on install directories are removed
#umask=
# Update modules tool cache file(s) after generating module file (def False)
#update-modules-tool-cache=
# Enable use of ccache to speed up compilation, with specified cache dir (type <type 'str'>; def False)
#use-ccache=
# Use existing modules when resolving dependencies with minimal toolchains (def False)
#use-existing-modules=
# Enable use of f90cache to speed up compilation, with specified cache dir (type <type 'str'>; def False)
#use-f90cache=
# Verify whether filename of specified easyconfigs matches with contents (def False)
#verify-easyconfig-filenames=
# Zip logs that are copied to install directory, using specified command (def gzip)
#zip-logs=

[package]
# Enabling packaging (def False)
#package=
# Package release iteration number (def 1)
#package-release=
# Packaging tool to use (def fpm)
#package-tool=
# Extra options for packaging tool (def '')
#package-tool-options=
# Type of package to generate (def rpm)
#package-type=

[regtest]
# Collect all the xmls inside the given directory and generate a single file
#aggregate-regtest=
# Enable regression test mode (def False)
#regtest=
# Set output directory for test-run
#regtest-output-dir=
# Specify this option if you want to prevent parallel build (def False)
#sequential=

[software]
# Specify additional search and build parameters (can be used multiple times); for example: versionprefix=foo or patches=one.patch,two.patch)
#amend=
# Search and build software with given name and version (type comma-separated list)
#software=
# Search and build software with given name
#software-name=
# Search and build software with given version
#software-version=
# Search and build with given toolchain (name and version) (type comma-separated list)
#toolchain=
# Search and build with given toolchain name
#toolchain-name=
# Search and build with given toolchain version
#toolchain-version=
# Try to specify additional search and build parameters (can be used multiple times); for example: versionprefix=foo or patches=one.patch,two.patch) (USE WITH CARE!)
#try-amend=
# Try to search and build software with given name and version (USE WITH CARE!) (type comma-separated list)
#try-software=
# Try to search and build software with given name (USE WITH CARE!)
#try-software-name=
# Try to search and build software with given version (USE WITH CARE!)
#try-software-version=
# Try to search and build with given toolchain (name and version) (USE WITH CARE!) (type comma-separated list)
#try-toolchain=
# Try to search and build with given toolchain name (USE WITH CARE!)
#try-toolchain-name=
# Try to search and build with given toolchain version (USE WITH CARE!)
#try-toolchain-version=

[unittest]
# Log to this file in unittest mode
#unittest-file=
